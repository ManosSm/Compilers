begin_block main_factorial _ _
inp x _ _
= 1 _ fact
= 1 _ i
<= i x 6
jump _ _ 11
* fact i %0
= %0 _ fact
+ i 1 %1
= %1 _ i
jump _ _ 4
out fact _ _
end_block main_factorial _ _
begin_block fibonacci _ _
<= x 1 16
jump _ _ 18
ret x _ _
jump _ _ 28
- x 1 %2
par %2 cv _
par %3 ret _
call fibonacci _ _
- x 2 %4
par %4 cv _
par %5 ret _
call fibonacci _ _
+ %3 %5 %6
ret %6 _ _
end_block fibonacci _ _
begin_block main_fibonacci _ _
inp x _ _
par x cv _
par %7 ret _
call fibonacci _ _
out %7 _ _
end_block main_fibonacci _ _
begin_block main_countdigits _ _
inp x _ _
= 0 _ count
> x 0 41
jump _ _ 46
// x 10 %8
= %8 _ x
+ count 1 %9
= %9 _ count
jump _ _ 39
out count _ _
end_block main_countdigits _ _
begin_block divides _ _
// y x %10
* %10 x %11
== y %11 53
jump _ _ 55
ret 1 _ _
jump _ _ 56
ret 0 _ _
end_block divides _ _
begin_block isPrime _ _
= 2 _ i
< i x 61
jump _ _ 71
par i cv _
par x cv _
par %12 ret _
call divides _ _
== %12 1 67
jump _ _ 68
ret 0 _ _
+ i 1 %13
= %13 _ i
jump _ _ 59
ret 1 _ _
end_block isPrime _ _
begin_block main_primes _ _
= 2 _ i
< i 30 77
jump _ _ 86
par i cv _
par %14 ret _
call isPrime _ _
== %14 1 82
jump _ _ 83
out i _ _
+ i 1 %15
= %15 _ i
jump _ _ 75
end_block main_primes _ _
begin_block main_program _ _
call main_factorial _ _
call main_fibonacci _ _
call main_countdigits _ _
call main_primes _ _
halt _ _ _
end_block main_program _ _
